
thm or.left(prop p1, prop p2) {
    |- imp(p1, or(p1, p2))
} = {
    syl(p1, or(p1,p2), imp(not(p1),p2))
    or.def.2(p1, p2)
    absurd.2(p1, p2)
}

thm or.left.i(prop p1, prop p2) {
    |- or(p1, p2)
    -| p1
} = {
    ax.mp(or(p1,p2), p1)
    or.left(p1, p2)
}

thm or.right(prop p1, prop p2) {
    |- imp(p2, or(p1, p2))
} = {
    syl(p2, or(p1,p2), imp(not(p1),p2))
    or.def.2(p1, p2)
    ax.1(p2, not(p1))
}
thm or.right.i(prop p1, prop p2) {
    |- or(p1, p2)
    -| p2
} = {
    ax.mp(or(p1,p2), p2)
    or.right(p1, p2)
}

thm or.com(prop p1, prop p2) {
    |- imp(or(p1, p2), or(p2, p1))
} = {
    syl(or(p1,p2), or(p2,p1), imp(not(p1), p2))
    or.def.1(p1, p2)
    syl(imp(not(p1),p2), or(p2,p1), imp(not(p2), p1))
    or.def.2(p2, p1)
    syl(imp(not(p1),p2), imp(not(p2),p1), imp(not(p2), p1))
    contra.1(p1, p2)
    id(imp(not(p2),p1))
}
thm or.cases(prop p1, prop p2, prop p3) {
    |- imp(or(p1, p2), p3)
    -| imp(p1, p3)
    -| imp(p2, p3)
} = {
    syl(or(p1,p2), p3, imp(not(p1), p2))
    or.def.1(p1, p2)
    absurd.1d(imp(not(p1),p2), p3, p1)
    a1i(imp(not(p1),p2), imp(p1,p3))
    syl.d.1(not(p1), p2, p3)
}
thm or.and(prop p1, prop p2, prop p3) {
    |- imp(or(p1, and(p2, p3)), and(or(p1, p2), or(p1, p3)))
} = {
    and.intro.d(or(p1,and(p2,p3)), or(p1,p2), or(p1,p3))
    or.cases(p1, and(p2,p3), or(p1,p2))
    or.left(p1, p2)
    syl(and(p2,p3), or(p1,p2), p2)
    or.right(p1, p2)
    and.left(p2, p3)
    or.cases(p1, and(p2,p3), or(p1,p3))
    or.left(p1, p3)
    syl(and(p2,p3), or(p1,p3), p3)
    and.right(p2, p3)
    or.right(p1, p3)
}
thm and.or(prop p1, prop p2, prop p3) {
    |- imp(and(p1, or(p2, p3)), or(and(p1, p2), and(p1, p3)))
} = {
    and.impo(p1, or(p2,p3), or(and(p1,p2),and(p1,p3)))
    com12(p1, or(p2,p3), or(and(p1,p2),and(p1,p3)))
    or.cases(p2, p3, imp(p1,or(and(p1,p2),and(p1,p3))))
    com12(p2, p1, or(and(p1,p2),and(p1,p3)))
    and.expo(p1, p2, or(and(p1,p2),and(p1,p3)))
    or.left(and(p1,p2), and(p1,p3))
    com12(p3, p1, or(and(p1,p2),and(p1,p3)))
    and.expo(p1, p3, or(and(p1,p2),and(p1,p3)))
    or.right(and(p1,p2), and(p1,p3))
}

thm or.not(prop p1) {
    |- or(p1, not(p1))
} = {
    ax.mp(or(p1,not(p1)), imp(not(p1), not(p1)))
    or.def.2(p1, not(p1))
    id(not(p1))
}

thm or.cases.i(prop p1, prop p2) {
    |- p1
    -| imp(p2, p1)
    -| imp(not(p2), p1)
} = {
    ax.mp(p1, or(p2,not(p2)))
    or.not(p2)
    or.cases(p2, not(p2), p1)
}

