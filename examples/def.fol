type prop 
term prop imp(prop p1, prop p2) {(p1 ‚Üí p2)}
term prop not(prop p1) {¬¨ p1}
term prop or(prop p1, prop p2) {(p1 ‚à® p2)}
term prop and(prop p1, prop p2) {(p1 ‚àß p2)}
term prop iff(prop p1, prop p2) {(p1 ‚Üî p2)}
term prop true { T }
term prop false { F }

axiom ax.1(prop p1, prop p2) {
  |- imp(p1, imp(p2, p1))
}
axiom ax.2(prop p1, prop p2, prop p3) {
  |- imp(imp(p1, imp(p2, p3)), imp(imp(p1, p2), imp(p1, p3)))
}
axiom ax.3(prop p1, prop p2) {
  |- imp(imp(not(p1), not(p2)), imp(p2, p1))
}
axiom ax.mp(prop p1, prop p2) {
  |- p1
  -| p2
  -| imp(p2, p1)
}
axiom and.def.1(prop p1, prop p2) {
  |- imp(and(p1, p2), not(imp(p1, not(p2))))
}
axiom and.def.2(prop p1, prop p2) {
  |- imp(not(imp(p1, not(p2))), and(p1, p2))
}
axiom or.def.1(prop p1, prop p2) {
  |- imp(or(p1, p2), imp(not(p1), p2))
}
axiom or.def.2(prop p1, prop p2) {
  |- imp(imp(not(p1), p2), or(p1, p2))
}
axiom iff.def.1(prop p1, prop p2) {
  |- imp(iff(p1, p2), and(imp(p1, p2), imp(p2, p1)))
}
axiom iff.def.2(prop p1, prop p2) {
  |- imp(and(imp(p1, p2), imp(p2, p1)), iff(p1, p2))
}
axiom true.def() {
  |- true
}
axiom false.def() {
  |- not(false)
}

type set
term set hs0 
term set hs1
term prop forall(set s0, prop p1) { ‚àÄ(s0, p1) }
term prop exist(set s0, prop p1) { ‚àÉ(s0, p1) }
term prop eq(set s0, set s1) { (s0 = s1) }
axiom ax.gen(set s0, prop p1) {
  |- forall(s0, p1)
  -| p1
}
axiom ax.4(set s0, prop p1, prop p2) {
  |- imp(forall(s0, imp(p1, p2)), imp(forall(s0, p1), forall(s0, p2)))
}
axiom ax.5(set s0, prop p1) {
  |- imp(p1, forall(s0, p1))
  diff (s0, p1)
}
axiom exist.def(set s0, prop p1) { |- iff(exist(s0, p1), not(forall(s0, not(p1)))) }
axiom ax.6(set s0, set s1) { |- exist(s0, eq(s0, s1)) }
axiom ax.7(set s0, set s1, set s2) { |- imp(eq(s0, s1), imp(eq(s0, s2), eq(s1, s2)))}
axiom ax.10(set s0, prop p1) {
  |- imp(not(forall(s0, p1)), forall(s0, not(forall(s0, p1))))
}
axiom ax.11(set s0, set s1, prop p1) {
  |- imp(forall(s0, forall(s1, p1)), forall(s1, forall(s0, p1)))
}
axiom ax.12(set s0, set s1, prop p1) {
  |- imp(eq(s0, s1), imp(p1, forall(s0, imp(eq(s0, s1), p1))))
}

term prop neq(set s0, set s1) { (s0 ‚â† s1) }

axiom neq.def(set s0, set s1) {
  |- iff(neq(s0, s1), not(eq(s0, s1)))
}
// [t / s] p0
// t : target
// s : source
term prop subs(set t, set s, prop p) { ([ t / s ] p) } 
axiom subs.def(set t, set s, prop p, set hs) {
  |- iff(subs(t, s, p), forall(hs, imp(eq(hs, t), forall(s, imp(eq(s, hs), p)))))
  diff (hs t) (hs s) (hs p)
}

// abstraction
term set abs(set s0, prop p1) { {s0 | p1} }
term prop in(set s0, set s1) { (s0 ‚àà s1) }
axiom abs.def(set s0, set s1, prop p1) {
  |- iff(in(s0, abs(s1, p1)), subs(s0, s1, p1))
}
axiom zfc.ax.ext(set s0, set s1, set s2) {
  |- imp(forall(s0, iff(in(s0, s1), in(s0, s2))), eq(s1, s2))
  diff (s0, s1, s2)
}
axiom ax.8(set s0, set s1, set s2) {
  |- imp(eq(s0, s1), imp(in(s0, s2), in(s1, s2)))
}
axiom ax.9(set s0, set s1, set s2) {
  |- imp(eq(s0, s1), imp(in(s2, s0), in(s2, s1)))
}

term set singleton(set s0) { {s0} }
term set pair(set s0, set s1) { {s0, s1} }
term set opair(set s0, set s1) { (s0, s1) }

axiom singleton.def.1(set s0) {
  |- in(s0, singleton(s0))
}
axiom singleton.def.2(set s0, set s1) {
  |- iff(in(s0, singleton(s1)), eq(s0, s1))
}
axiom pair.def.1(set s0, set s1) {
  |- in(s0, pair(s0, s1))
}
axiom pair.def.2(set s0, set s1) {
  |- in(s1, pair(s0, s1))
}
axiom pair.def.3(set s0, set s1, set s2) {
  |- iff(in(s0, pair(s1, s2)), or(eq(s0, s1), eq(s0, s2)))
}
axiom opair.def(set s0, set s1) {
  |- eq(opair(s0, s1), pair(singleton(s0), pair(s0, s1)))
}

term set sdiff(set s0, set s1) { (s0 \ s1)}
axiom sdiff.def(set s0, set s1, set s2) {
  |- iff(in(s0, sdiff(s1, s2)), and(in(s0, s1), not(in(s0,s2))))
  diff (s0, s1) (s0, s2)
}
term set sunion(set s0, set s1) { (s0 ‚ãÉ s1) }
axiom sunion.def(set s0, set s1, set s2) {
  |- iff(in(s0, sunion(s1,s2)), or(in(s0,s1), in(s0,s2)))
  diff (s0, s1) (s0, s2)
}
term set sinter(set s0, set s1) { (s0 ‚ãÇ s1) }
axiom sinter.def(set s0, set s1, set s2) {
  |- iff(in(s0, sinter(s1, s2)), and(in(s0, s1), in(s0, s2)))
  diff (s0, s1) (s0, s2)
}
term prop subseteq(set s0, set s1) { (s0 ‚äÜ s1) }
axiom subseteq.def(set s0, set s1, set s2) {
  |- iff(subseteq(s0, s1), imp(in(s2, s0), in(s2, s1)))
  |- imp(subseteq(s0, s1), imp(in(s2, s0), in(s2, s1)))
  |- imp(imp(in(s2, s0), in(s2, s1)), subseteq(s0, s1))
  diff (s2, s0) (s2, s1)
}
term prop subsetne(set s0, set s1) { (s0 ‚äÜ s1) }
axiom subsetne.def(set s0, set s1, set s2) {
  |- iff(subsetne(s0, s1), and(subseteq(s0, s1), not(eq(s0, s1))))
  |- imp(subsetne(s0, s1), and(subseteq(s0, s1), not(eq(s0, s1))))
  |- imp(and(subseteq(s0, s1), not(eq(s0, s1))), subsetne(s0, s1))
  diff (s2, s0) (s2, s1)
}
term set emptyset { ‚àÖ }
axiom emptyset.def(set s0) {
  |- iff(in(s0, emptyset), not(eq(s0, s0)))
}
term set spower(set s0) { ùí´(s0)}
axiom spower.def(set s0, set s1) {
  |- iff(in(s0, spower(s1)), subseteq(s0, s1))
  |- imp(in(s0, spower(s1)), subseteq(s0, s1))
  |- imp(subseteq(s0, s1), in(s0, spower(s1)))
}
term set ssunion(set s0) { ‚ãÉ(s0) }
axiom ssunion.def(set s0, set s1, set s2) {
  |- iff(in(s0, ssunion(s1)), exist(s2, and(in(s0, s2), in(s2, s1))))
  diff (s0, s1, s2)
}

axiom zfc.separation(set s0, set s1, set s2, prop p0) {
  |- exist(s0, forall(s1, iff(in(s1, s0), and(in(s1, s2), p0))))
  diff (s0, s1, s2) (p0, s1, s2)
}
axiom zfc.infinity(set s0, set s1) {
  |- exist(s0, and(in(emptyset, s0), forall(s1, imp(in(s1, s0), in(sunion(s1, singleton(s1)), s0)))))
  diff (s0, s1)
}
axiom zfc.ssunion(set s0, set s1, set s2) {
  |- exist(s0, forall(s2, iff(in(s2, s0), in(s2, ssunion(s1)))))
  diff (s0, s1, s2)
}
axiom zfc.powerset(set s0, set s1, set s2) {
  |- exist(s0, forall(s2, iff(in(s2, s0), in(s2, spower(s1)))))
  diff (s0, s1, s2)
}

term set sprod(set s0, set s1) { (s0 ‚®Ø s1)}
axiom sprod.def(set s0, set s1, set s2, set s3) {
  |- iff(in(opair(s2,s3), sprod(s0,s1)), and(in(s2,s0),in(s3,s1)))
  diff (s0, s2, s3) (s1, s2, s3)
}

term set mapsto(set x, set X, set Y) { (x ‚àà X ‚Ü¶ Y)}
axiom mapsto.def(set x, set y, set X, set Y) {
  |- iff(in(y, mapsto(x, X, Y)), in(opair(x, y), sprod(X, Y)))
  diff (x, y) (y, X) (y, Y)
}

term prop relation(set x, set R, set y) { (x R y) }
axiom relation.def(set x, set R, set y) {
  |- iff(relation(x, R, y), in(opair(x, y), R))
}
term set relation.dom(set R) { dom(R) }
axiom relation.dom.def(set x, set R, set y) {
  |- iff(in(x, relation.dom(R)), exist(y, in(opair(x, y), R)))
}
term set relation.ran(set R) { ran(R) }
axiom relation.ran.def(set x, set R, set y) {
  |- iff(in(y, relation.ran(R)), exist(x, in(opair(x, y), R)))
}

term prop transition(set s0) { Trans(s0) }
axiom transition.def(set s0, set s1) {
  |- iff(transition(s0), imp(in(s1,s0), subseteq(s1,s0)))
}

// wi(wal(s0, wex(s1, wal(s2, wi(wal(s1, w0), wceq(cv(s2), cv(s1)))))), 
// wex(s1, wal(s2, wb(wcel(cv(s2), cv(s1)), wex(s0, wa(wcel(cv(s0), cv(s3)), wal(s1, w0)))))))
axiom zfc.replacement(set s0, set s1, set s2, set s3, prop p0) {
|- imp(
  forall(s0, exist(s1, forall(s2, imp(forall(s1, p0), eq(s2, s1))))),
  exist(s1, forall(s2, iff(in(s2, s1), exist(s0, and(in(s0, s3), forall(s1, p0))))))
)
  diff (s0, s1, s2, s3)
}
