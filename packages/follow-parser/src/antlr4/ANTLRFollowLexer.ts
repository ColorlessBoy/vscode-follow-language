// Generated from ./antlr4/ANTLRFollowLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ANTLRFollowLexer extends Lexer {
	public static readonly WS = 1;
	public static readonly NL = 2;
	public static readonly SC = 3;
	public static readonly LINE_COMMENT = 4;
	public static readonly BLOCK_COMMENT = 5;
	public static readonly LBRACE = 6;
	public static readonly RBRACE = 7;
	public static readonly LBRACKET = 8;
	public static readonly RBRACKET = 9;
	public static readonly LPAREN = 10;
	public static readonly RPAREN = 11;
	public static readonly EQ = 12;
	public static readonly COMMA = 13;
	public static readonly KW_TYPE = 14;
	public static readonly KW_CONST = 15;
	public static readonly KW_VAR = 16;
	public static readonly KW_PROP = 17;
	public static readonly KW_AXIOM = 18;
	public static readonly KW_THEOREM = 19;
	public static readonly KW_ASSUME = 20;
	public static readonly KW_TARGET = 21;
	public static readonly ID = 22;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"WS", "NL", "SC", "LINE_COMMENT", "BLOCK_COMMENT", "LBRACE", "RBRACE", 
		"LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "EQ", "COMMA", "KW_TYPE", 
		"KW_CONST", "KW_VAR", "KW_PROP", "KW_AXIOM", "KW_THEOREM", "KW_ASSUME", 
		"KW_TARGET", "ID",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "'='", "','", "'type'", "'const'", 
		"'var'", "'prop'", "'axiom'", "'thm'", "'-|'", "'|-'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "WS", "NL", "SC", "LINE_COMMENT", "BLOCK_COMMENT", "LBRACE", 
		"RBRACE", "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "EQ", "COMMA", "KW_TYPE", 
		"KW_CONST", "KW_VAR", "KW_PROP", "KW_AXIOM", "KW_THEOREM", "KW_ASSUME", 
		"KW_TARGET", "ID",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ANTLRFollowLexer._LITERAL_NAMES, ANTLRFollowLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ANTLRFollowLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ANTLRFollowLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ANTLRFollowLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return ANTLRFollowLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ANTLRFollowLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ANTLRFollowLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ANTLRFollowLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x18\x95\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x03\x02\x06\x021\n\x02\r\x02\x0E\x022\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x03\x05\x03:\n\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x05\x03\x05\x07\x05F\n\x05\f\x05\x0E\x05I\v\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x07\x06" +
		"S\n\x06\f\x06\x0E\x06V\v\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03" +
		"\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x06\x17\x92\n\x17\r\x17\x0E\x17" +
		"\x93\x03T\x02\x02\x18\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v" +
		"\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
		"\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
		"\'\x02\x15)\x02\x16+\x02\x17-\x02\x18\x03\x02\x06\x04\x02\v\v\"\"\x04" +
		"\x02\f\f\x0F\x0F\x03\x02\f\f\x07\x02/02;C\\aac|\x02\x99\x02\x03\x03\x02" +
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
		"\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02" +
		"\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02" +
		"\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02" +
		")\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x030\x03\x02" +
		"\x02\x02\x059\x03\x02\x02\x02\x07=\x03\x02\x02\x02\tA\x03\x02\x02\x02" +
		"\vN\x03\x02\x02\x02\r\\\x03\x02\x02\x02\x0F^\x03\x02\x02\x02\x11`\x03" +
		"\x02\x02\x02\x13b\x03\x02\x02\x02\x15d\x03\x02\x02\x02\x17f\x03\x02\x02" +
		"\x02\x19h\x03\x02\x02\x02\x1Bj\x03\x02\x02\x02\x1Dl\x03\x02\x02\x02\x1F" +
		"q\x03\x02\x02\x02!w\x03\x02\x02\x02#{\x03\x02\x02\x02%\x80\x03\x02\x02" +
		"\x02\'\x86\x03\x02\x02\x02)\x8A\x03\x02\x02\x02+\x8D\x03\x02\x02\x02-" +
		"\x91\x03\x02\x02\x02/1\t\x02\x02\x020/\x03\x02\x02\x0212\x03\x02\x02\x02" +
		"20\x03\x02\x02\x0223\x03\x02\x02\x0234\x03\x02\x02\x0245\b\x02\x02\x02" +
		"5\x04\x03\x02\x02\x0267\x07\x0F\x02\x027:\x07\f\x02\x028:\t\x03\x02\x02" +
		"96\x03\x02\x02\x0298\x03\x02\x02\x02:;\x03\x02\x02\x02;<\b\x03\x02\x02" +
		"<\x06\x03\x02\x02\x02=>\x07=\x02\x02>?\x03\x02\x02\x02?@\b\x04\x02\x02" +
		"@\b\x03\x02\x02\x02AB\x071\x02\x02BC\x071\x02\x02CG\x03\x02\x02\x02DF" +
		"\n\x04\x02\x02ED\x03\x02\x02\x02FI\x03\x02\x02\x02GE\x03\x02\x02\x02G" +
		"H\x03\x02\x02\x02HJ\x03\x02\x02\x02IG\x03\x02\x02\x02JK\x07\f\x02\x02" +
		"KL\x03\x02\x02\x02LM\b\x05\x03\x02M\n\x03\x02\x02\x02NO\x071\x02\x02O" +
		"P\x07,\x02\x02PT\x03\x02\x02\x02QS\v\x02\x02\x02RQ\x03\x02\x02\x02SV\x03" +
		"\x02\x02\x02TU\x03\x02\x02\x02TR\x03\x02\x02\x02UW\x03\x02\x02\x02VT\x03" +
		"\x02\x02\x02WX\x07,\x02\x02XY\x071\x02\x02YZ\x03\x02\x02\x02Z[\b\x06\x03" +
		"\x02[\f\x03\x02\x02\x02\\]\x07}\x02\x02]\x0E\x03\x02\x02\x02^_\x07\x7F" +
		"\x02\x02_\x10\x03\x02\x02\x02`a\x07]\x02\x02a\x12\x03\x02\x02\x02bc\x07" +
		"_\x02\x02c\x14\x03\x02\x02\x02de\x07*\x02\x02e\x16\x03\x02\x02\x02fg\x07" +
		"+\x02\x02g\x18\x03\x02\x02\x02hi\x07?\x02\x02i\x1A\x03\x02\x02\x02jk\x07" +
		".\x02\x02k\x1C\x03\x02\x02\x02lm\x07v\x02\x02mn\x07{\x02\x02no\x07r\x02" +
		"\x02op\x07g\x02\x02p\x1E\x03\x02\x02\x02qr\x07e\x02\x02rs\x07q\x02\x02" +
		"st\x07p\x02\x02tu\x07u\x02\x02uv\x07v\x02\x02v \x03\x02\x02\x02wx\x07" +
		"x\x02\x02xy\x07c\x02\x02yz\x07t\x02\x02z\"\x03\x02\x02\x02{|\x07r\x02" +
		"\x02|}\x07t\x02\x02}~\x07q\x02\x02~\x7F\x07r\x02\x02\x7F$\x03\x02\x02" +
		"\x02\x80\x81\x07c\x02\x02\x81\x82\x07z\x02\x02\x82\x83\x07k\x02\x02\x83" +
		"\x84\x07q\x02\x02\x84\x85\x07o\x02\x02\x85&\x03\x02\x02\x02\x86\x87\x07" +
		"v\x02\x02\x87\x88\x07j\x02\x02\x88\x89\x07o\x02\x02\x89(\x03\x02\x02\x02" +
		"\x8A\x8B\x07/\x02\x02\x8B\x8C\x07~\x02\x02\x8C*\x03\x02\x02\x02\x8D\x8E" +
		"\x07~\x02\x02\x8E\x8F\x07/\x02\x02\x8F,\x03\x02\x02\x02\x90\x92\t\x05" +
		"\x02\x02\x91\x90\x03\x02\x02\x02\x92\x93\x03\x02\x02\x02\x93\x91\x03\x02" +
		"\x02\x02\x93\x94\x03\x02\x02\x02\x94.\x03\x02\x02\x02\b\x0229GT\x93\x04" +
		"\b\x02\x02\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ANTLRFollowLexer.__ATN) {
			ANTLRFollowLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ANTLRFollowLexer._serializedATN));
		}

		return ANTLRFollowLexer.__ATN;
	}

}

